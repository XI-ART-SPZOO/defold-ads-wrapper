local druid = require("druid.druid")
local ads_wrapper = require("ads_wrapper.ads_wrapper")
local platform = require("ads_wrapper.platform")

---https://stackoverflow.com/questions/6075262/lua-table-tostringtablename-and-table-fromstringstringtable-functions
local function serializeTable(val, name, skipnewlines, depth)
    skipnewlines = skipnewlines or false
    depth = depth or 0
    local tmp = string.rep("  ", depth)
    if name then
        tmp = tmp .. name .. " = "
    end
    if type(val) == "table" then
        tmp = tmp .. "{" .. (not skipnewlines and "\n" or "")
        for k, v in pairs(val) do
            tmp = tmp .. serializeTable(v, k, skipnewlines, depth + 1) .. "," .. (not skipnewlines and "\n" or "")
        end
        tmp = tmp .. string.rep("  ", depth) .. "}"
    elseif type(val) == "number" then
        tmp = tmp .. tostring(val)
    elseif type(val) == "string" then
        tmp = tmp .. string.format("%q", val)
    elseif type(val) == "boolean" then
        tmp = tmp .. (val and "true" or "false")
    else
        -- tmp = tmp .. "\"[inserializeable datatype:" .. type(val) .. "]\""
        tmp = tmp .. tostring(val)
    end
    return tmp
end

local function update_log(self)
    local metrix = gui.get_text_metrics_from_node(self.log_text)
    self.log_size.y = metrix.height * 0.5 + 10
    if self.log_size.y < 350 then
        self.log_size.y = 350
    end
    self.log_scroll:set_size(self.log_size)
    -- local pos = gui.get_position(self.log_scroll_content)
    -- pos.y = 100 + self.log_size.y - 200
    -- gui.set_position(self.log_scroll_content, pos)
    self.log_scroll:scroll_to_percent(self.percent_y_100)
end

local function print_log(self, method, data)
    pprint(method, data)
    local text = "[" .. os.date("%H:%M:%S") .. "] " .. method .. ": "
    if data or data == false then
        if type(data) == "table" then
            text = text .. serializeTable(data)
        else
            text = text .. tostring(data)
        end
    else
        text = text .. "nil"
    end
    self.logs = self.logs .. text .. "\n"
    local max = 2000
    local length = #self.logs
    if length > max then
        self.logs = self.logs:sub(length - max, -1)
    end
    gui.set_text(self.log_text, self.logs)
    update_log(self)
end

local function on_load_interstitial(self)
    ads_wrapper.load_interstitial(function(response)
        print_log(self, "load_interstitial", response)
    end)
end

local function on_show_interstitial(self)
    ads_wrapper.show_interstitial(function(response)
        print_log(self, "show_interstitial", response)
    end)
end

local function on_load_rewarded(self)
    ads_wrapper.load_rewarded(function(response)
        print_log(self, "load_rewarded", response)
    end)
end

local function on_show_rewarded(self)
    ads_wrapper.show_rewarded(function(response)
        print_log(self, "show_rewarded", response)
    end)
end

local function on_load_banner(self)
    ads_wrapper.load_banner(function(response)
        print_log(self, "load_banner", response)
    end)
end

local function on_unload_banner(self)
    ads_wrapper.unload_banner(function(response)
        print_log(self, "unload_banner", response)
    end)
end

local function on_show_banner(self)
    ads_wrapper.show_banner(function(response)
        print_log(self, "show_banner", response)
    end)
end

local function on_hide_banner(self)
    ads_wrapper.hide_banner(function(response)
        print_log(self, "hide_banner", response)
    end)
end

local function on_init_video(self)
    ads_wrapper.init_video_networks(function(response)
        print_log(self, "init_video_networks", response)
    end)
end

local function on_init_banner(self)
    ads_wrapper.init_banner_networks(function(response)
        print_log(self, "init_banner_networks", response)
    end)
end

local function is_rewarded_loaded(self)
    local value = ads_wrapper.is_rewarded_loaded()
    local network = ads_wrapper.get_current_network()
    local next_network = ads_wrapper.get_next_network()
    print_log(self, "is_rewarded_loaded", {value = value, current = network.NAME, next = next_network.NAME})
end

local function is_interstitial_loaded(self)
    local value = ads_wrapper.is_interstitial_loaded()
    local network = ads_wrapper.get_current_network()
    local next_network = ads_wrapper.get_next_network()
    print_log(self, "is_interstitial_loaded", {value = value, current = network.NAME, next = next_network.NAME})
end

local function is_banner_loaded(self)
    local value = ads_wrapper.is_banner_loaded()
    local network = ads_wrapper.get_current_network(true)
    local next_network = ads_wrapper.get_next_network(true)
    print_log(self, "is_banner_loaded", {value = value, current = network.NAME, next = next_network.NAME})
end

local function init_test(self)
    ads_wrapper.clear_networks()
    local test = require("ads_wrapper.ads_networks.test")
    local test_1_id = ads_wrapper.register_network(test.network1, {param = "test_param 1"})
    local test_2_id = ads_wrapper.register_network(test.network2, {param = "test_param 2"})
    ads_wrapper.setup_video({{id = test_1_id, count = 1}, {id = test_2_id, count = 2}, {id = test_1_id, count = 2}}, 4)
    ads_wrapper.setup_banner({{id = test_1_id, count = 1}})
    ads_wrapper.init(true, true, function(response)
        print_log(self, "init_test", response)
    end)
end

local function init_mobiles(self)
    if platform.is_same(platform.PL_ANDROID) or platform.is_same(platform.PL_IOS) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/AGulev/DefVideoAds/archive/refs/tags/4.1.2.zip
        local unity = require("ads_wrapper.ads_networks.unity")
        local unity_net_id = ads_wrapper.register_network(unity, {
            ids = {[platform.PL_ANDROID] = "1401815", [platform.PL_IOS] = "1425385"},
            [ads_wrapper.T_REWARDED] = "rewardedVideo",
            [ads_wrapper.T_INTERSTITIAL] = "video",
            [ads_wrapper.T_BANNER] = {id = "banner", size = {width = 720, height = 90}, position = unityads.BANNER_POSITION_BOTTOM_RIGHT}
        })

        -- Need to add the extension: https://github.com/defold/extension-admob/archive/refs/tags/2.1.2.zip
        local admob_module = require("ads_wrapper.ads_networks.admob")
        local admob_net_id = ads_wrapper.register_network(admob_module, {
            [ads_wrapper.T_REWARDED] = "ca-app-pub-3940256099942544/5224354917",
            [ads_wrapper.T_INTERSTITIAL] = "ca-app-pub-3940256099942544/1033173712",
            [ads_wrapper.T_BANNER] = {
                id = "ca-app-pub-3940256099942544/6300978111",
                size = admob.SIZE_MEDIUM_RECTANGLE,
                position = admob.POS_BOTTOM_LEFT
            }
        })

        ads_wrapper.setup_video({{id = admob_net_id, count = 2}, {id = unity_net_id, count = 3}, {id = admob_net_id, count = 3}}, 6)
        ads_wrapper.setup_banner({{id = admob_net_id, count = 2}, {id = unity_net_id, count = 1}}, 6)
        print_log(self, "init_mobiles", "Admob and Unity Ads set up")
    else
        print_log(self, "init_mobiles", "Mobiles not support on this platform")
    end
end

local function init_poki(self)
    if platform.is_same(platform.PL_HTML5) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/AGulev/defold-poki-sdk/archive/refs/tags/1.3.0.zip
        local poki = require("ads_wrapper.ads_networks.poki")
        local poki_net_id = ads_wrapper.register_network(poki)
        ads_wrapper.setup_video({{id = poki_net_id}})
        print_log(self, "init_poki", "Poki set up")
        -- Poki has no banners
    else
        print_log(self, "init_poki", "Poki not support on this platform")
    end
end

local function init_yandex(self)
    if platform.is_same(platform.PL_HTML5) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/indiesoftby/defold-yagames/archive/refs/tags/0.7.4.zip
        pprint("Please uncomment lines when you adding extension")
        -- local yandex = require("ads_wrapper.ads_networks.yandex")
        -- local yagames = require("yagames.yagames")
        -- local sitelock = require("yagames.sitelock")
        -- yandex.set_yandex_extention(yagames, sitelock)
        -- local yandex_net_id = ads_wrapper.register_network(yandex, {
        --     [ads_wrapper.T_BANNER] = {id = "[your id here]", size = {width = "100vw", height = "56vh"}, position = {x = "0px", y = "0px"}}
        -- })
        -- ads_wrapper.setup_video({{id = yandex_net_id, count = 1}}, 1)
        -- ads_wrapper.setup_banner({{id = yandex_net_id, count = 1}}, 1)
        -- print_log(self, "init_yandex", "Yandex set up")
    else
        print_log(self, "init_yandex", "Yandex not support on this platform")
    end
end

local function init_vk(self)
    if platform.is_same(platform.PL_HTML5) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/potatojam/defold-vkbridge/archive/refs/tags/1.0.2.zip
        pprint("Please uncomment lines when you adding extension")
        -- local vk = require("ads_wrapper.ads_networks.vk")
        -- local vkbridge = require("vkbridge.vkbridge")
        -- vk.set_vkbridge_extention(vkbridge)
        -- local vk_net_id = ads_wrapper.register_network(vk, {
        --     [ads_wrapper.T_BANNER] = {count = 1, possition = "top"}
        -- })
        -- ads_wrapper.setup_video({{id = vk_net_id, count = 1}}, 1)
        -- ads_wrapper.setup_banner({{id = vk_net_id, count = 1}}, 1)
        -- print_log(self, "init_vk", "Vk set up")
    else
        print_log(self, "init_vk", "Vk not support on this platform")
    end
end

function init(self)
    self.logs = ""
    self.percent_y_100 = vmath.vector3(0, 1, 0)
    self.druid = druid.new(self)
    self.log_scroll_content = gui.get_node("bkg_scroll_content")
    self.log_scroll = self.druid:new_scroll("mask", self.log_scroll_content)
    self.log_text = gui.get_node("txt_log")
    self.log_size = vmath.vector3(550, 350, 0)
    update_log(self)
    self.log_scroll:set_extra_stretch_size(0)

    self.druid:new_button("btn_load_interstitial", on_load_interstitial)
    self.druid:new_button("btn_show_interstitial", on_show_interstitial)
    self.druid:new_button("btn_load_rewarded", on_load_rewarded)
    self.druid:new_button("btn_show_rewarded", on_show_rewarded)
    self.druid:new_button("btn_show_banner", on_show_banner)
    self.druid:new_button("btn_hide_banner", on_hide_banner)
    self.druid:new_button("btn_load_banner", on_load_banner)
    self.druid:new_button("btn_unload_banner", on_unload_banner)
    self.druid:new_button("btn_init_video", on_init_video)
    self.druid:new_button("btn_init_banner", on_init_banner)
    self.druid:new_button("btn_init_test", init_test)
    self.druid:new_button("btn_init_mobiles", init_mobiles)
    self.druid:new_button("btn_init_poki", init_poki)
    self.druid:new_button("btn_init_yandex", init_yandex)
    self.druid:new_button("btn_init_vk", init_vk)
    self.druid:new_button("btn_is_rewarded_loaded", is_rewarded_loaded)
    self.druid:new_button("btn_is_interstitial_loaded", is_interstitial_loaded)
    self.druid:new_button("btn_is_banner_loaded", is_banner_loaded)

    print_log(self, "init", "version: " .. sys.get_config("project.version"))
    init_test(self)
end

function update(self, dt)
    self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end

function final(self)
    self.druid:final()
end
