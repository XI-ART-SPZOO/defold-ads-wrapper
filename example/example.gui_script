local druid = require("druid.druid")
local ads_wrapper = require("ads_wrapper.ads_wrapper")
local platform = require("ads_wrapper.platform")

---https://stackoverflow.com/questions/6075262/lua-table-tostringtablename-and-table-fromstringstringtable-functions
local function serializeTable(val, name, skipnewlines, depth)
    skipnewlines = skipnewlines or false
    depth = depth or 0
    local tmp = string.rep("  ", depth)
    if name then
        tmp = tmp .. name .. " = "
    end
    if type(val) == "table" then
        tmp = tmp .. "{" .. (not skipnewlines and "\n" or "")
        for k, v in pairs(val) do
            tmp = tmp .. serializeTable(v, k, skipnewlines, depth + 1) .. "," .. (not skipnewlines and "\n" or "")
        end
        tmp = tmp .. string.rep("  ", depth) .. "}"
    elseif type(val) == "number" then
        tmp = tmp .. tostring(val)
    elseif type(val) == "string" then
        tmp = tmp .. string.format("%q", val)
    elseif type(val) == "boolean" then
        tmp = tmp .. (val and "true" or "false")
    else
        -- tmp = tmp .. "\"[inserializeable datatype:" .. type(val) .. "]\""
        tmp = tmp .. tostring(val)
    end
    return tmp
end

local function set_button_state(button, value)
    button:set_enabled(value)
    gui.set_enabled(button.node, value)
end

local function set_buttons(self, state)
    gui.set_enabled(self.txt_init, state)
    gui.set_enabled(self.txt_advertising, not state)
    gui.set_enabled(self.txt_banners, not state)
    for index, button in ipairs(self.ads) do
        set_button_state(button, not state)
    end
    for index, button in ipairs(self.services) do
        set_button_state(button, state)
    end
end

local function show_services_buttons(self)
    set_buttons(self, true)
end

local function show_ads_buttons(self)
    set_buttons(self, false)
end

local function update_log(self)
    local metrix = gui.get_text_metrics_from_node(self.log_text)
    self.log_size.y = metrix.height * 0.5 + 10
    if self.log_size.y < 350 then
        self.log_size.y = 350
    end
    self.log_scroll:set_size(self.log_size)
    -- local pos = gui.get_position(self.log_scroll_content)
    -- pos.y = 100 + self.log_size.y - 200
    -- gui.set_position(self.log_scroll_content, pos)
    self.log_scroll:scroll_to_percent(self.percent_y_100)
end

local function print_log(self, method, data)
    pprint(method, data)
    local text = "[" .. os.date("%H:%M:%S") .. "] " .. method .. ": "
    if data or data == false then
        if type(data) == "table" then
            text = text .. serializeTable(data)
        else
            text = text .. tostring(data)
        end
    else
        text = text .. "nil"
    end
    self.logs = self.logs .. text .. "\n"
    local max = 2000
    local length = #self.logs
    if length > max then
        self.logs = self.logs:sub(length - max, -1)
    end
    gui.set_text(self.log_text, self.logs)
    update_log(self)
end

local function on_load_interstitial(self)
    ads_wrapper.load_interstitial(function(response)
        print_log(self, "load_interstitial", response)
    end)
end

local function on_show_interstitial(self)
    ads_wrapper.show_interstitial(function(response)
        print_log(self, "show_interstitial", response)
    end)
end

local function on_load_rewarded(self)
    ads_wrapper.load_rewarded(function(response)
        print_log(self, "load_rewarded", response)
    end)
end

local function on_show_rewarded(self)
    ads_wrapper.show_rewarded(function(response)
        print_log(self, "show_rewarded", response)
    end)
end

local function on_load_banner(self)
    ads_wrapper.load_banner(function(response)
        print_log(self, "load_banner", response)
    end)
end

local function on_unload_banner(self)
    ads_wrapper.unload_banner(function(response)
        print_log(self, "unload_banner", response)
    end)
end

local function on_show_banner(self)
    ads_wrapper.show_banner(function(response)
        print_log(self, "show_banner", response)
    end)
end

local function on_hide_banner(self)
    ads_wrapper.hide_banner(function(response)
        print_log(self, "hide_banner", response)
    end)
end

local function on_init_video(self)
    ads_wrapper.init_video_networks(function(response)
        print_log(self, "init_video_networks", response)
    end)
end

local function on_init_banner(self)
    ads_wrapper.init_banner_networks(function(response)
        print_log(self, "init_banner_networks", response)
    end)
end

local function is_rewarded_loaded(self)
    local value = ads_wrapper.is_rewarded_loaded()
    local network = ads_wrapper.get_current_network()
    local next_network = ads_wrapper.get_next_network()
    if network and next_network then
        print_log(self, "is_rewarded_loaded", { value = value, current = network.NAME, next = next_network.NAME })
    end
end

local function is_interstitial_loaded(self)
    local value = ads_wrapper.is_interstitial_loaded()
    local network = ads_wrapper.get_current_network()
    local next_network = ads_wrapper.get_next_network()
    if network and next_network then
        print_log(self, "is_interstitial_loaded", { value = value, current = network.NAME, next = next_network.NAME })
    end
end

local function is_banner_loaded(self)
    local value = ads_wrapper.is_banner_loaded()
    local network = ads_wrapper.get_current_network(true)
    local next_network = ads_wrapper.get_next_network(true)
    if network and next_network then
        print_log(self, "is_banner_loaded", { value = value, current = network.NAME, next = next_network.NAME })
    end
end

local function init_test(self)
    ads_wrapper.clear_networks()
    local test = require("ads_wrapper.ads_networks.test")
    local test_1_id = ads_wrapper.register_network(test.network1, { param = "test_param 1" })
    local test_2_id = ads_wrapper.register_network(test.network2, { param = "test_param 2" })
    if test_1_id and test_2_id then
        ads_wrapper.setup_video({ { id = test_1_id, count = 1 }, { id = test_2_id, count = 2 }, { id = test_1_id, count = 2 } }, 4)
        ads_wrapper.setup_banner({ { id = test_1_id, count = 1 } })
        ads_wrapper.init(true, true, function(response)
            print_log(self, "init_test", response)
        end)
        show_ads_buttons(self)
    else
        print_log(self, "init_test", "Mobiles not support on this platform")
    end
end

local function init_mobiles(self)
    if platform.is_same(platform.PL_ANDROID) or platform.is_same(platform.PL_IOS) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/AGulev/DefVideoAds/archive/refs/tags/4.5.1.zip
        local unity = require("ads_wrapper.ads_networks.unity")
        local unity_net_id = ads_wrapper.register_network(unity, {
            ids = { [platform.PL_ANDROID] = "1401815", [platform.PL_IOS] = "1425385" },
            [ads_wrapper.T_REWARDED] = "rewardedVideo",
            [ads_wrapper.T_INTERSTITIAL] = "video",
            [ads_wrapper.T_BANNER] = { id = "banner", size = { width = 720, height = 90 }, position = unityads.BANNER_POSITION_BOTTOM_RIGHT }
        })

        -- Need to add the extension: https://github.com/defold/extension-admob/archive/refs/tags/3.0.1.zip
        local admob_module = require("ads_wrapper.ads_networks.admob")
        local admob_net_id = ads_wrapper.register_network(admob_module, {
            [ads_wrapper.T_REWARDED] = "ca-app-pub-3940256099942544/5224354917",
            [ads_wrapper.T_INTERSTITIAL] = "ca-app-pub-3940256099942544/1033173712",
            [ads_wrapper.T_BANNER] = {
                id = "ca-app-pub-3940256099942544/6300978111",
                size = admob.SIZE_MEDIUM_RECTANGLE,
                position = admob.POS_BOTTOM_LEFT
            }
        })

        if admob_net_id and unity_net_id then
            ads_wrapper.setup_video({ { id = admob_net_id, count = 2 }, { id = unity_net_id, count = 3 }, { id = admob_net_id, count = 3 } }, 6)
            ads_wrapper.setup_banner({ { id = admob_net_id, count = 2 }, { id = unity_net_id, count = 1 } }, 6, true)
            print_log(self, "init_mobiles", "Admob and Unity Ads set up")
            show_ads_buttons(self)
        else
            print_log(self, "init_mobiles", "Mobiles not support on this platform")
        end
    else
        print_log(self, "init_mobiles", "Mobiles not support on this platform")
    end
end

local function init_poki(self)
    if platform.is_same(platform.PL_HTML5) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/AGulev/defold-poki-sdk/archive/refs/tags/1.3.0.zip
        local poki = require("ads_wrapper.ads_networks.poki")
        local poki_net_id = ads_wrapper.register_network(poki)
        if poki_net_id then
            ads_wrapper.setup_video({ { id = poki_net_id } })
            print_log(self, "init_poki", "Poki set up")
            -- Poki has no banners
            show_ads_buttons(self)
        else
            print_log(self, "init_poki", "Mobiles not support on this platform")
        end
    else
        print_log(self, "init_poki", "Poki not support on this platform")
    end
end

local function init_yandex(self)
    if platform.is_same(platform.PL_HTML5) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/indiesoftby/defold-yagames/archive/refs/tags/0.9.0.zip
        pprint("Please uncomment lines when you adding extension")
        -- local yandex = require("ads_wrapper.ads_networks.yandex")
        -- local yagames = require("yagames.yagames")
        -- yandex.set_yandex_extention(yagames)
        -- local yandex_net_id = ads_wrapper.register_network(yandex, {
        --     [ads_wrapper.T_BANNER] = { id = "[your id here]", size = { width = "100vw", height = "56vh" }, position = { x = "0px", y = "0px" } }
        -- })
        -- if yandex_net_id then
        --     ads_wrapper.setup_video({ { id = yandex_net_id, count = 1 } }, 1)
        --     ads_wrapper.setup_banner({ { id = yandex_net_id, count = 1 } }, 1)
        --     print_log(self, "init_yandex", "Yandex set up")
        --     show_ads_buttons(self)
        -- else
        --     print_log(self, "init_yandex", "Yandex not support on this platform")
        -- end
    else
        print_log(self, "init_yandex", "Yandex not support on this platform")
    end
end

local function init_vk(self)
    if platform.is_same(platform.PL_HTML5) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/potatojam/defold-vkbridge/archive/refs/tags/1.0.2.zip
        pprint("Please uncomment lines when you adding extension")
        -- local vk = require("ads_wrapper.ads_networks.vk")
        -- local vkbridge = require("vkbridge.vkbridge")
        -- vk.set_vkbridge_extention(vkbridge)
        -- local vk_net_id = ads_wrapper.register_network(vk, {
        --     [ads_wrapper.T_BANNER] = { count = 1, possition = "top" }
        -- })
        -- if vk_net_id then
        --     ads_wrapper.setup_video({ { id = vk_net_id, count = 1 } }, 1)
        --     ads_wrapper.setup_banner({ { id = vk_net_id, count = 1 } }, 1)
        --     print_log(self, "init_vk", "Vk set up")
        --     show_ads_buttons(self)
        -- else
        --     print_log(self, "init_vk", "Vk not support on this platform")
        -- end
    else
        print_log(self, "init_vk", "Vk not support on this platform")
    end
end

local function init_applovin_max(self)
    if platform.is_same(platform.PL_ANDROID) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/alexeyfeskov/defold-maxsdk/archive/refs/tags/11.4.4.zip
        local applovin_max = require("ads_wrapper.ads_networks.applovin_max")
        local applovin_max_net_id = ads_wrapper.register_network(applovin_max, {
            [ads_wrapper.T_REWARDED] = "YOUR_RE_AD_UNIT",
            [ads_wrapper.T_INTERSTITIAL] = "YOUR_IN_AD_UNIT",
            [ads_wrapper.T_BANNER] = {
                id = "YOUR_BA_AD_UNIT",
                mrec_id = "YOUR_MREC_AD_UNIT",
                size = applovin_max.POS_BOTTOM_CENTER,
                position = applovin_max.SIZE_BANNER
            },
            LDU = {
                name = "LDU",
                country = 1,
                state = 0
            },
            has_user_consent = true,
            is_age_restricted_user = false,
            do_not_sell = false,
            muted = false,
            verbose_logging = true
        })

        if applovin_max_net_id then
            ads_wrapper.setup_video({ { id = applovin_max_net_id, count = 1 } }, 1)
            ads_wrapper.setup_banner({ { id = applovin_max_net_id, count = 1 } }, 1)
            print_log(self, "init_applovin_max", "Applovin Max Ads set up")
            show_ads_buttons(self)
            set_button_state(self.btn_mediation_applovin, true)
        else
            print_log(self, "init_applovin_max", "Applovin Max not support on this platform")
        end
    else
        print_log(self, "init_applovin_max", "Applovin Max not support on this platform")
    end
end

local function init_yandex_mobile(self)
    if platform.is_same(platform.PL_ANDROID) or platform.is_same(platform.PL_IOS) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/osov/defold-yandex-sdk-ads/releases/download/1.0/defold-yandex-sdk-ads.zip
        local yandex_mobiles = require("ads_wrapper.ads_networks.yandex_mobile")
        local yandex_mobiles_net_id = ads_wrapper.register_network(yandex_mobiles, {
            [ads_wrapper.T_BANNER] = "R-M-DEMO-300x250",
            [ads_wrapper.T_INTERSTITIAL] = "R-M-DEMO-interstitial",
            [ads_wrapper.T_REWARDED] = "R-M-DEMO-rewarded-client-side-rtb"
        })

        if yandex_mobiles_net_id then
            ads_wrapper.setup_video({ { id = yandex_mobiles_net_id, count = 1 } })
            ads_wrapper.setup_banner({ { id = yandex_mobiles_net_id, count = 1 } })
            print_log(self, "init_yandex_mobile", "Yandex Mobile Ads set up")
            show_ads_buttons(self)
        else
            print_log(self, "init_yandex_mobile", "Yandex Mobile Ads not support on this platform")
        end
    else
        print_log(self, "init_yandex_mobile", "Yandex Mobile Ads not support on this platform")
    end
end

local function init_game_distribution(self)
    if platform.is_same(platform.PL_HTML5) then
        ads_wrapper.clear_networks()

        -- Need to add the extension: https://github.com/GameDistribution/gd-defold
        local game_distribution = require("ads_wrapper.ads_networks.game_distribution")
        local game_distribution_net_id = ads_wrapper.register_network(game_distribution, {
            [ads_wrapper.T_BANNER] = {
                {
                    auto_create = true,
                    size = game_distribution.SIZE_336x280,
                    parent_id = "canvas-container",
                    wrapper_style =
                    "position: absolute; top: 50vh; left: 0px; width: 100%; height: 25vh; display: flex;align-items: center;justify-content: center;overflow: hidden;",
                    ad_style = "display: none;",
                    banner_id = "canvas-ad-bot",
                    wrapper_display = "flex"
                },
                {
                    auto_create = true,
                    size = game_distribution.SIZE_336x280,
                    parent_id = "canvas-container",
                    wrapper_style =
                    "position: absolute; top: 75vh; left: 0px; width: 100%; height: 25vh; display: flex;align-items: center;justify-content: center;overflow: hidden;",
                    ad_style = " display: none;",
                    banner_id = "canvas-ad-top",
                    wrapper_display = "flex"
                }
            }
        })

        if game_distribution_net_id then
            ads_wrapper.setup_video({ { id = game_distribution_net_id, count = 1 } })
            ads_wrapper.setup_banner({ { id = game_distribution_net_id, count = 1 } })
            print_log(self, "init_game_distribution", "Game Distribution Ads set up")
            show_ads_buttons(self)
        else
            print_log(self, "init_game_distribution", "Game Distribution Ads not support on this platform")
        end
    else
        print_log(self, "init_game_distribution", "Game Distribution Ads not support on this platform")
    end
end

---Create a button and add it to the services table
---@param self userdata
---@param name string node functions
---@param callback function
local function create_service_button(self, name, callback)
    local button = self.druid:new_button(name, callback)
    table.insert(self.services, button)
end

---Create a button and add it to the ads table
---@param self userdata
---@param name string node functions
---@param callback function
local function create_ads_button(self, name, callback)
    local button = self.druid:new_button(name, callback)
    table.insert(self.ads, button)
end

local function on_mediation_applovin(self)
    if ads_wrapper.is_initialized() and maxsdk then
        maxsdk.open_mediation_debugger()
    end
end

function init(self)
    self.logs = ""
    self.percent_y_100 = vmath.vector3(0, 1, 0)
    self.druid = druid.new(self)
    self.log_scroll_content = gui.get_node("bkg_scroll_content")
    self.log_scroll = self.druid:new_scroll("mask", self.log_scroll_content)
    self.log_text = gui.get_node("txt_log")
    self.log_size = vmath.vector3(550, 350, 0)
    update_log(self)
    self.log_scroll:set_extra_stretch_size(0)
    self.ads = {}
    self.services = {}

    self.txt_init = gui.get_node("txt_init")
    self.txt_advertising = gui.get_node("txt_advertising")
    self.txt_banners = gui.get_node("txt_banners")

    create_service_button(self, "btn_init_test", init_test)
    create_service_button(self, "btn_init_mobiles", init_mobiles)
    create_service_button(self, "btn_init_poki", init_poki)
    create_service_button(self, "btn_init_yandex", init_yandex)
    create_service_button(self, "btn_init_vk", init_vk)
    create_service_button(self, "btn_init_applovin", init_applovin_max)
    create_service_button(self, "btn_init_yandex_mobile", init_yandex_mobile)
    create_service_button(self, "btn_init_game_distribution", init_game_distribution)

    create_ads_button(self, "btn_load_interstitial", on_load_interstitial)
    create_ads_button(self, "btn_show_interstitial", on_show_interstitial)
    create_ads_button(self, "btn_load_rewarded", on_load_rewarded)
    create_ads_button(self, "btn_show_rewarded", on_show_rewarded)
    create_ads_button(self, "btn_show_banner", on_show_banner)
    create_ads_button(self, "btn_hide_banner", on_hide_banner)
    create_ads_button(self, "btn_load_banner", on_load_banner)
    create_ads_button(self, "btn_unload_banner", on_unload_banner)
    create_ads_button(self, "btn_init_video", on_init_video)
    create_ads_button(self, "btn_init_banner", on_init_banner)
    create_ads_button(self, "btn_is_rewarded_loaded", is_rewarded_loaded)
    create_ads_button(self, "btn_is_interstitial_loaded", is_interstitial_loaded)
    create_ads_button(self, "btn_is_banner_loaded", is_banner_loaded)
    self.btn_mediation_applovin = self.druid:new_button("btn_mediation_applovin", on_mediation_applovin)
    set_button_state(self.btn_mediation_applovin, false)

    print_log(self, "init", "version: " .. sys.get_config("project.version"))
    init_test(self)
    show_services_buttons(self)
end

function update(self, dt)
    self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end

function final(self)
    self.druid:final()
end
